import { Construct } from "constructs";
import { AzAPIBase, IAzAPIBaseProps } from "./core-azapi";

/**
 * Interface representing the properties for instance pool configuration.
 *
 * @extends IAzAPIBaseProps Base properties including name, location, and tags.
 */
export interface ContainerinstanceContainergroupsProps extends IAzAPIBaseProps {

}

/**
 * ContainerinstanceContainergroups resource
 */
export class ContainerinstanceContainergroups extends AzAPIBase {
  constructor(scope: Construct, id: string, props: ContainerinstanceContainergroupsProps) {
    super(scope, id, props);
  }

  protected getResourceType(): string {
    return "Microsoft.ContainerInstance/containerGroups@2023-05-01";
  }

  protected getResourceBody(props: ContainerinstanceContainergroupsProps): string {
    return JSON.stringify(
        {properties: {confidentialComputeProperties: {ccePolicy: "string"}, containers: [{name: "string", properties: {command: ["string"], environmentVariables: [{name: "string", secureValue: "string", value: "string"}], image: "string", livenessProbe: {exec: {command: ["string"]}, failureThreshold: "${int}", httpGet: {httpHeaders: [{name: "string", value: "string"}], path: "string", port: "${int}", scheme: "string"}, initialDelaySeconds: "${int}", periodSeconds: "${int}", successThreshold: "${int}", timeoutSeconds: "${int}"}, ports: [{port: "${int}", protocol: "string"}], readinessProbe: {exec: {command: ["string"]}, failureThreshold: "${int}", httpGet: {httpHeaders: [{name: "string", value: "string"}], path: "string", port: "${int}", scheme: "string"}, initialDelaySeconds: "${int}", periodSeconds: "${int}", successThreshold: "${int}", timeoutSeconds: "${int}"}, resources: {limits: {cpu: "${int}", gpu: {count: "${int}", sku: "string"}, memoryInGB: "decimal-as-string"}, requests: {cpu: "${int}", gpu: {count: "${int}", sku: "string"}, memoryInGB: "decimal-as-string"}}, securityContext: {allowPrivilegeEscalation: "${bool}", capabilities: {add: ["string"], drop: ["string"]}, privileged: "${bool}", runAsGroup: "${int}", runAsUser: "${int}", seccompProfile: "string"}, volumeMounts: [{mountPath: "string", name: "string", readOnly: "${bool}"}]}}], diagnostics: {logAnalytics: {logType: "string", metadata: {}, workspaceId: "string", workspaceKey: "string", workspaceResourceId: "string"}}, dnsConfig: {nameServers: ["string"], options: "string", searchDomains: "string"}, encryptionProperties: {identity: "string", keyName: "string", keyVersion: "string", vaultBaseUrl: "string"}, extensions: [{name: "string", properties: {extensionType: "string", version: "string"}}], imageRegistryCredentials: [{identity: "string", identityUrl: "string", password: "string", server: "string", username: "string"}], initContainers: [{name: "string", properties: {command: ["string"], environmentVariables: [{name: "string", secureValue: "string", value: "string"}], image: "string", securityContext: {allowPrivilegeEscalation: "${bool}", capabilities: {add: ["string"], drop: ["string"]}, privileged: "${bool}", runAsGroup: "${int}", runAsUser: "${int}", seccompProfile: "string"}, volumeMounts: [{mountPath: "string", name: "string", readOnly: "${bool}"}]}}], ipAddress: {autoGeneratedDomainNameLabelScope: "string", dnsNameLabel: "string", ip: "string", ports: [{port: "${int}", protocol: "string"}], type: "string"}, osType: "string", priority: "string", restartPolicy: "string", sku: "string", subnetIds: [{id: "string", name: "string"}], volumes: [{azureFile: {readOnly: "${bool}", shareName: "string", storageAccountKey: "string", storageAccountName: "string"}, gitRepo: {directory: "string", repository: "string", revision: "string"}, name: "string", secret: {}}]}, zones: ["string"]}
    );
  }
}
