import { Construct } from "constructs";
import { AzAPIBase, IAzAPIBaseProps } from "./core-azapi";

/**
 * Interface representing the properties for instance pool configuration.
 *
 * @extends IAzAPIBaseProps Base properties including name, location, and tags.
 */
export interface ComputeVirtualmachinescalesetsVirtualmachinesProps extends IAzAPIBaseProps {

}

/**
 * ComputeVirtualmachinescalesetsVirtualmachines resource
 */
export class ComputeVirtualmachinescalesetsVirtualmachines extends AzAPIBase {
  constructor(scope: Construct, id: string, props: ComputeVirtualmachinescalesetsVirtualmachinesProps) {
    super(scope, id, props);
  }

  protected getResourceType(): string {
    return "Microsoft.Compute/virtualMachineScaleSets/virtualMachines@2023-03-01";
  }

  protected getResourceBody(props: ComputeVirtualmachinescalesetsVirtualmachinesProps): string {
    return JSON.stringify(
        {properties: {additionalCapabilities: {hibernationEnabled: "${bool}", ultraSSDEnabled: "${bool}"}, availabilitySet: {id: "string"}, diagnosticsProfile: {bootDiagnostics: {enabled: "${bool}", storageUri: "string"}}, hardwareProfile: {vmSize: "string", vmSizeProperties: {vCPUsAvailable: "${int}", vCPUsPerCore: "${int}"}}, licenseType: "string", networkProfile: {networkApiVersion: "2020-11-01", networkInterfaceConfigurations: [{name: "string", properties: {deleteOption: "string", disableTcpStateTracking: "${bool}", dnsSettings: {dnsServers: ["string"]}, dscpConfiguration: {id: "string"}, enableAcceleratedNetworking: "${bool}", enableFpga: "${bool}", enableIPForwarding: "${bool}", ipConfigurations: [{name: "string", properties: {applicationGatewayBackendAddressPools: [{id: "string"}], applicationSecurityGroups: [{id: "string"}], loadBalancerBackendAddressPools: [{id: "string"}], primary: "${bool}", privateIPAddressVersion: "string", publicIPAddressConfiguration: {name: "string", properties: {deleteOption: "string", dnsSettings: {domainNameLabel: "string"}, idleTimeoutInMinutes: "${int}", ipTags: [{ipTagType: "string", tag: "string"}], publicIPAddressVersion: "string", publicIPAllocationMethod: "string", publicIPPrefix: {id: "string"}}, sku: {name: "string", tier: "string"}}, subnet: {id: "string"}}}], networkSecurityGroup: {id: "string"}, primary: "${bool}"}}], networkInterfaces: [{id: "string", properties: {deleteOption: "string", primary: "${bool}"}}]}, networkProfileConfiguration: {networkInterfaceConfigurations: [{name: "string", properties: {deleteOption: "string", disableTcpStateTracking: "${bool}", dnsSettings: {dnsServers: ["string"]}, enableAcceleratedNetworking: "${bool}", enableFpga: "${bool}", enableIPForwarding: "${bool}", ipConfigurations: [{name: "string", properties: {applicationGatewayBackendAddressPools: [{id: "string"}], applicationSecurityGroups: [{id: "string"}], loadBalancerBackendAddressPools: [{id: "string"}], loadBalancerInboundNatPools: [{id: "string"}], primary: "${bool}", privateIPAddressVersion: "string", publicIPAddressConfiguration: {name: "string", properties: {deleteOption: "string", dnsSettings: {domainNameLabel: "string"}, idleTimeoutInMinutes: "${int}", ipTags: [{ipTagType: "string", tag: "string"}], publicIPAddressVersion: "string", publicIPPrefix: {id: "string"}}, sku: {name: "string", tier: "string"}}, subnet: {id: "string"}}}], networkSecurityGroup: {id: "string"}, primary: "${bool}"}}]}, osProfile: {adminPassword: "string", adminUsername: "string", allowExtensionOperations: "${bool}", computerName: "string", customData: "string", linuxConfiguration: {disablePasswordAuthentication: "${bool}", enableVMAgentPlatformUpdates: "${bool}", patchSettings: {assessmentMode: "string", automaticByPlatformSettings: {bypassPlatformSafetyChecksOnUserSchedule: "${bool}", rebootSetting: "string"}, patchMode: "string"}, provisionVMAgent: "${bool}", ssh: {publicKeys: [{keyData: "string", path: "string"}]}}, requireGuestProvisionSignal: "${bool}", secrets: [{sourceVault: {id: "string"}, vaultCertificates: [{certificateStore: "string", certificateUrl: "string"}]}], windowsConfiguration: {additionalUnattendContent: [{componentName: "Microsoft-Windows-Shell-Setup", content: "string", passName: "OobeSystem", settingName: "string"}], enableAutomaticUpdates: "${bool}", enableVMAgentPlatformUpdates: "${bool}", patchSettings: {assessmentMode: "string", automaticByPlatformSettings: {bypassPlatformSafetyChecksOnUserSchedule: "${bool}", rebootSetting: "string"}, enableHotpatching: "${bool}", patchMode: "string"}, provisionVMAgent: "${bool}", timeZone: "string", winRM: {listeners: [{certificateUrl: "string", protocol: "string"}]}}}, protectionPolicy: {protectFromScaleIn: "${bool}", protectFromScaleSetActions: "${bool}"}, securityProfile: {encryptionAtHost: "${bool}", securityType: "string", uefiSettings: {secureBootEnabled: "${bool}", vTpmEnabled: "${bool}"}}, storageProfile: {dataDisks: [{caching: "string", createOption: "string", deleteOption: "string", detachOption: "ForceDetach", diskSizeGB: "${int}", image: {uri: "string"}, lun: "${int}", managedDisk: {diskEncryptionSet: {id: "string"}, id: "string", securityProfile: {diskEncryptionSet: {id: "string"}, securityEncryptionType: "string"}, storageAccountType: "string"}, name: "string", toBeDetached: "${bool}", vhd: {uri: "string"}, writeAcceleratorEnabled: "${bool}"}], diskControllerType: "string", imageReference: {communityGalleryImageId: "string", id: "string", offer: "string", publisher: "string", sharedGalleryImageId: "string", sku: "string", version: "string"}, osDisk: {caching: "string", createOption: "string", deleteOption: "string", diffDiskSettings: {option: "Local", placement: "string"}, diskSizeGB: "${int}", encryptionSettings: {diskEncryptionKey: {secretUrl: "string", sourceVault: {id: "string"}}, enabled: "${bool}", keyEncryptionKey: {keyUrl: "string", sourceVault: {id: "string"}}}, image: {uri: "string"}, managedDisk: {diskEncryptionSet: {id: "string"}, id: "string", securityProfile: {diskEncryptionSet: {id: "string"}, securityEncryptionType: "string"}, storageAccountType: "string"}, name: "string", osType: "string", vhd: {uri: "string"}, writeAcceleratorEnabled: "${bool}"}}, userData: "string"}, plan: {name: "string", product: "string", promotionCode: "string", publisher: "string"}}
    );
  }
}
