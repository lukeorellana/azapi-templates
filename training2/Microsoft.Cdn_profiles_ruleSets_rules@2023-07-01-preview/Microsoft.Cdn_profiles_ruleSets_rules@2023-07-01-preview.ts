import { Construct } from "constructs";
import { AzAPIBase, IAzAPIBaseProps } from "./core-azapi";

/**
 * Interface representing the properties for instance pool configuration.
 *
 * @extends IAzAPIBaseProps Base properties including name, location, and tags.
 */
export interface CdnProfilesRulesetsRulesProps extends IAzAPIBaseProps {
/**
   * In Bicep, you can specify the parent resource for a child resource. You only need to add this property when the child resource is declared outside of the parent resource.For more information, seeChild resource outside parent resource.
   */
readonly parent?: Symbolic name for resource of type:ruleSets;

/**
   * A list of actions that are executed when all the conditions of a rule are satisfied.
   */
readonly actions?: DeliveryRuleActionAutoGenerated[];

/**
   * A list of conditions that must be matched for the actions to be executed
   */
readonly conditions?: DeliveryRuleCondition[];

/**
   * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
   */
readonly matchProcessingBehavior?: 'Continue''Stop';

/**
   * The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,â¦â¦â¦}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
   */
readonly order?: number;

/**
   * Defines the parameters for the action.
   */
readonly parameters: AfdUrlSigningActionParameters;

/**
   * Algorithm to use for URL signing
   */
readonly algorithm?: 'SHA256';

/**
   * Resource reference to the Azure Key Vault secret. Expected to be in format of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/keyGroups/{keyGroupName}
   */
readonly keyGroupReference: ResourceReference;

/**
   * Defines which query string parameters in the url to be considered for expires, key id etc.
   */
readonly parameterNameOverride?: UrlSigningParamIdentifier[];

/**
   * 
   */
readonly typeName: 'DeliveryRuleAfdUrlSigningActionParameters';

/**
   * Resource ID.
   */
readonly id?: string;

/**
   * Indicates the purpose of the parameter
   */
readonly paramIndicator: 'Expires''KeyId''Signature';

/**
   * Parameter name
   */
readonly paramName: string;

/**
   * Defines the parameters for the action.
   */
readonly parameters: CacheExpirationActionParameters;

/**
   * Caching behavior for the requests
   */
readonly cacheBehavior: 'BypassCache''Override''SetIfMissing';

/**
   * The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
   */
readonly cacheDuration?: string;

/**
   * The level at which the content needs to be cached.
   */
readonly cacheType: 'All';

/**
   * 
   */
readonly typeName: 'DeliveryRuleCacheExpirationActionParameters';

/**
   * Defines the parameters for the action.
   */
readonly parameters: CacheKeyQueryStringActionParameters;

/**
   * query parameters to include or exclude (comma separated).
   */
readonly queryParameters?: string;

/**
   * Caching behavior for the requests
   */
readonly queryStringBehavior: 'Exclude''ExcludeAll''Include''IncludeAll';

/**
   * 
   */
readonly typeName: 'DeliveryRuleCacheKeyQueryStringBehaviorActionParameters';

/**
   * Defines the parameters for the action.
   */
readonly parameters: HeaderActionParameters;

/**
   * Action to perform
   */
readonly headerAction: 'Append''Delete''Overwrite';

/**
   * Name of the header to modify
   */
readonly headerName: string;

/**
   * 
   */
readonly typeName: 'DeliveryRuleHeaderActionParameters';

/**
   * Value for the specified action
   */
readonly value?: string;

/**
   * Defines the parameters for the action.
   */
readonly parameters: HeaderActionParameters;

/**
   * Defines the parameters for the action.
   */
readonly parameters: OriginGroupOverrideActionParameters;

/**
   * defines the OriginGroup that would override the DefaultOriginGroup.
   */
readonly originGroup: ResourceReference;

/**
   * 
   */
readonly typeName: 'DeliveryRuleOriginGroupOverrideActionParameters';

/**
   * Defines the parameters for the action.
   */
readonly parameters: RouteConfigurationOverrideActionParameters;

/**
   * The caching configuration associated with this rule. To disable caching, do not provide a cacheConfiguration object.
   */
readonly cacheConfiguration?: CacheConfiguration;

/**
   * A reference to the origin group override configuration. Leave empty to use the default origin group on route.
   */
readonly originGroupOverride?: OriginGroupOverride;

/**
   * 
   */
readonly typeName: 'DeliveryRuleRouteConfigurationOverrideActionParameters';

/**
   * Caching behavior for the requests
   */
readonly cacheBehavior?: 'HonorOrigin''OverrideAlways''OverrideIfOriginMissing';

/**
   * The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
   */
readonly cacheDuration?: string;

/**
   * Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB.
   */
readonly isCompressionEnabled?: 'Disabled''Enabled';

/**
   * query parameters to include or exclude (comma separated).
   */
readonly queryParameters?: string;

/**
   * Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.
   */
readonly queryStringCachingBehavior?: 'IgnoreQueryString''IgnoreSpecifiedQueryStrings''IncludeSpecifiedQueryStrings''UseQueryString';

/**
   * Protocol this rule will use when forwarding traffic to backends.
   */
readonly forwardingProtocol?: 'HttpOnly''HttpsOnly''MatchRequest';

/**
   * defines the OriginGroup that would override the DefaultOriginGroup on route.
   */
readonly originGroup?: ResourceReference;

/**
   * Defines the parameters for the action.
   */
readonly parameters: UrlRedirectActionParameters;

/**
   * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
   */
readonly customFragment?: string;

/**
   * Host to redirect. Leave empty to use the incoming host as the destination host.
   */
readonly customHostname?: string;

/**
   * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
   */
readonly customPath?: string;

/**
   * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in {key}={value} format. ? and & will be added automatically so do not include them.
   */
readonly customQueryString?: string;

/**
   * Protocol to use for the redirect. The default value is MatchRequest
   */
readonly destinationProtocol?: 'Http''Https''MatchRequest';

/**
   * The redirect type the rule will use when redirecting traffic.
   */
readonly redirectType: 'Found''Moved''PermanentRedirect''TemporaryRedirect';

/**
   * 
   */
readonly typeName: 'DeliveryRuleUrlRedirectActionParameters';

/**
   * Defines the parameters for the action.
   */
readonly parameters: UrlRewriteActionParameters;

/**
   * Define the relative URL to which the above requests will be rewritten by.
   */
readonly destination: string;

/**
   * Whether to preserve unmatched path. Default value is true.
   */
readonly preserveUnmatchedPath?: bool;

/**
   * define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched.
   */
readonly sourcePattern: string;

/**
   * 
   */
readonly typeName: 'DeliveryRuleUrlRewriteActionParameters';

/**
   * Defines the parameters for the action.
   */
readonly parameters: UrlSigningActionParameters;

/**
   * Algorithm to use for URL signing
   */
readonly algorithm?: 'SHA256';

/**
   * Defines which query string parameters in the url to be considered for expires, key id etc.
   */
readonly parameterNameOverride?: UrlSigningParamIdentifier[];

/**
   * 
   */
readonly typeName: 'DeliveryRuleUrlSigningActionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: ClientPortMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleClientPortConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: CookiesMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * Name of Cookies to be matched
   */
readonly selector?: string;

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleCookiesConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: HostNameMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleHostNameConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: HttpVersionMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Equal';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleHttpVersionConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: IsDeviceMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: String array containing any of:'Desktop''Mobile';

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Equal';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleIsDeviceConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: PostArgsMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * Name of PostArg to be matched
   */
readonly selector?: string;

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRulePostArgsConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: QueryStringMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleQueryStringConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: RemoteAddressMatchConditionParameters;

/**
   * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''GeoMatch''IPMatch';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleRemoteAddressConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: RequestBodyMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleRequestBodyConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: RequestHeaderMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * Name of Header to be matched
   */
readonly selector?: string;

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleRequestHeaderConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: RequestMethodMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: String array containing any of:'DELETE''GET''HEAD''OPTIONS''POST''PUT''TRACE';

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Equal';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleRequestMethodConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: RequestSchemeMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: String array containing any of:'HTTP''HTTPS';

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Equal';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleRequestSchemeConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: RequestUriMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleRequestUriConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: ServerPortMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleServerPortConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: SocketAddrMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''IPMatch';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleSocketAddrConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: SslProtocolMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: String array containing any of:'TLSv1''TLSv1.1''TLSv1.2';

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Equal';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleSslProtocolConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: UrlFileExtensionMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleUrlFileExtensionMatchConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: UrlFileNameMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleUrlFilenameConditionParameters';

/**
   * Defines the parameters for the condition.
   */
readonly parameters: UrlPathMatchConditionParameters;

/**
   * The match value for the condition of the delivery rule
   */
readonly matchValues?: string[];

/**
   * Describes if this is negate condition or not
   */
readonly negateCondition?: bool;

/**
   * Describes operator to be matched
   */
readonly operator: 'Any''BeginsWith''Contains''EndsWith''Equal''GreaterThan''GreaterThanOrEqual''LessThan''LessThanOrEqual''RegEx''Wildcard';

/**
   * List of transforms
   */
readonly transforms?: String array containing any of:'Lowercase''RemoveNulls''Trim''Uppercase''UrlDecode''UrlEncode';

/**
   * 
   */
readonly typeName: 'DeliveryRuleUrlPathMatchConditionParameters';
}

/**
 * CdnProfilesRulesetsRules resource
 */
export class CdnProfilesRulesetsRules extends AzAPIBase {
  constructor(scope: Construct, id: string, props: CdnProfilesRulesetsRulesProps) {
    super(scope, id, props);
  }

  protected getResourceType(): string {
    return "Microsoft.Cdn/profiles/ruleSets/rules@2023-07-01-preview";
  }

  protected getResourceBody(props: CdnProfilesRulesetsRulesProps): string {
    return JSON.stringify(
        {properties: {actions: [{name: "string"}], conditions: [{name: "string"}], matchProcessingBehavior: "string", order: "${int}"}}
    );
  }
}
